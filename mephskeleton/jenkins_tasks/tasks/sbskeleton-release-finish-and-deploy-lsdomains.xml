<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition plugin="git-parameter@0.9.2">
          <name>PROMOTE_BRANCH</name>
          <description>Version a cerrar y desplegar</description>
          <uuid>52f18de3-79ef-44a0-960c-e09005d24329</uuid>
          <type>PT_BRANCH</type>
          <branch></branch>
          <tagFilter>*</tagFilter>
          <branchFilter>(.*/release/.*|.*/hotfix/.*)</branchFilter>
          <sortMode>DESCENDING_SMART</sortMode>
          <defaultValue></defaultValue>
          <selectedValue>NONE</selectedValue>
          <quickFilterEnabled>false</quickFilterEnabled>
          <listSize>5</listSize>
        </net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.mavenrepocleaner.MavenRepoCleanerProperty plugin="maven-repo-cleaner@1.2">
      <notOnThisProject>false</notOnThisProject>
    </org.jenkinsci.plugins.mavenrepocleaner.MavenRepoCleanerProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.8.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://<url_repo_git></url>
        <credentialsId>jenkins_admin</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.BitbucketWeb">
      <url>https://<url_web_repo_git></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.LocalBranch>
        <localBranch>master</localBranch>
      </hudson.plugins.git.extensions.impl.LocalBranch>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;A partir del chechout automatico de master hacemos merge de la branch indicada por parametro ${PROMOTE_BRANCH} ${ORIGEN} ${TIPO} ${VERSION}&quot;
git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff ${PROMOTE_BRANCH}
echo &quot;Nos aseguramos de que en master tenemos la version correcta mediante mvn setversion, a veces con el fast forward, no toca los pom de master&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Maven>
      <targets>versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false</targets>
      <mavenName>M3</mavenName>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>echo &quot;Hacemos add de todos los ficheros pom modificados al stage precommit&quot;
git add --all
echo &quot;Si no hay nada que modificar, si hemos rescrito la misma version, no se ejecuta nada, sino se hace commit&quot;
git diff-index --quiet HEAD || git commit -m &quot;Release master merge ${PROMOTE_BRANCH} updating poms&quot;
echo &quot;Hacemos push a master remote&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> master
echo &quot;Taggeamos localmente la rama master&quot;
git tag -a ${VERSION} -m &quot;Release master tag updating poms&quot;
echo &quot;Hacemos push al tag&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> ${VERSION}
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>cd build_pipeline
export PATH=$PATH:$M3_HOME/bin
export CICD_S3_USER=${CICD_S3_USER}
export CICD_S3_PASS=${CICD_S3_PASS}
echo &quot;usuario sysops $CICD_USER&quot;
./05_promote_from_pre_to_pro_wdpre.sh -f jenkins -v ${VERSION}</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>GROUPNAME=softbase
ARTIFACT=mephskeleton
VERSION=${VERSION}</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>softbase/utils/deploy_wdpre_pro</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>cd build_pipeline
export PATH=$PATH:$M3_HOME/bin
export CICD_S3_USER=${CICD_S3_USER}
export CICD_S3_PASS=${CICD_S3_PASS}
echo &quot;usuario sysops $CICD_USER&quot;
./05_promote_from_pre_to_pro_lsdomains.sh -f jenkins -v ${VERSION}</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.35.2">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>GROUPNAME=mephskeleton
ARTIFACT=mephskeleton-${VERSION}.zip</properties>
              <textParamValueOnNewLine>false</textParamValueOnNewLine>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>softbase/utils/deploy_lsdomains2_pro</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>cd build_pipeline
export PATH=$PATH:$M3_HOME/bin
./06_smoke_test_environmet.sh  -f jenkins -e pro</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo &quot;Hacemos checkout de develop&quot;
git checkout develop
echo &quot;Hacemos el merge de la release a develop&quot;
git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff ${PROMOTE_BRANCH}
#git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff origin/master
echo &quot;Volvemos a hacer mvn setversion de RELEASE-INT-SNAPSHOT en develop&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Maven>
      <targets>versions:set -DnewVersion=RELEASE-INT-SNAPSHOT -DgenerateBackupPoms=false</targets>
      <mavenName>M3</mavenName>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>echo &quot;Hacemos add de todos los ficheros pom modificados al stage precommit&quot;
git add --all
echo &quot;Si no hay nada que modificar, si hemos rescrito la misma version, no se ejecuta nada, sino se hace commit&quot;
git diff-index --quiet HEAD || git commit -m &quot;Release develop merge ${PROMOTE_BRANCH} updating poms&quot;
echo &quot;Hacemos push a develop remote&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> develop
echo &quot;Borramos la rama remota de la release&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> --delete ${TIPO}/${VERSION}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.16">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>cicd.sysops</credentialsId>
          <usernameVariable>CICD_USER</usernameVariable>
          <passwordVariable>CICD_PASS</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>cicd.sysops.s3.deploy</credentialsId>
          <usernameVariable>CICD_S3_USER</usernameVariable>
          <passwordVariable>CICD_S3_PASS</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <EnvInjectBuildWrapper plugin="envinject@2.1.5">
      <info>
        <secureGroovyScript plugin="script-security@1.44">
          <script>import hudson.model.*

def values=PROMOTE_BRANCH.split(&apos;/&apos;);
def map = [:]
map[&apos;VERSION&apos;] = values[2]
map[&apos;TIPO&apos;] = values[1]
map[&apos;ORIGEN&apos;] = values[0]
return map</script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>
