pipeline {
    agent any

    environment {
        mvnhome= tool 'M3'
        PATH = "${mvnhome}/bin:$PATH"
        BRANCH="${env.BRANCH_NAME}"
    }

    stages
    {

       stage('Init pipeline') {
           steps
           {
                //milestone(1)
                dir('./build_pipeline') {
                    sh 'chmod 770 *.sh'
                }
           }
        }

        stage('Build software') {
           steps
           {
                //milestone(1)
                dir('./build_pipeline') {
                    sh 'echo "------------ $PATH"'
                    sh 'export PATH="${mvnhome}:$PATH" && ./01_01_build_software.sh -f jenkins'
                }
           }
        }

       stage('Unit Test') {
           steps
           {
                //milestone(2)
                dir('./build_pipeline') {
                    sh 'echo $(pwd)'
                    sh 'export PATH="${mvnhome}:$PATH" && ./01_02_build_unit_tests.sh -f jenkins'
                }
           }
        }
       stage('Add sonar') {
           steps
           {
                //milestone(3)
                dir('./build_pipeline') {
                    sh 'echo $(pwd)'
                    sh 'export PATH="${mvnhome}:$PATH" && ./01_03_build_sonar.sh -f jenkins'
                }
           }
       }

       stage('Build Images') {
           steps
           {
                //milestone(4)
                dir('./build_pipeline') {
                    sh 'echo $(pwd)'
                    sh './02_docker_build_images.sh'
                }
           }
       }
       stage('Integration Test') {
            steps
            {
              withCredentials([usernamePassword(credentialsId: 'user_cicd', usernameVariable: 'CICD_USER', passwordVariable: 'CICD_PASS')])
              {
                //milestone(5)
                dir('./build_pipeline') {
                    sh './03_test_integracion.sh -f jenkins'
                }
              }
            }
       }

       stage('Deploy docker') {
            when {  expression { return env.GIT_BRANCH.contains('/release/') || env.GIT_BRANCH.contains('/hotfix/') } }
            steps
            {
              withCredentials([usernamePassword(credentialsId: 'user_cicd', usernameVariable: 'CICD_USER', passwordVariable: 'CICD_PASS')])
              {
                //milestone(6)
                  echo 'Desplegamos en PRE'
                  dir('./build_pipeline') {
                      sh './04_deploy.sh -f jenkins -f registrymng_pre -e pre'
                  }
               }
            }
       }

       stage('Smoke test pre') {
            when {  expression { return env.GIT_BRANCH.contains('/release/') || env.GIT_BRANCH.contains('/hotfix/') } }
            steps
            {
              withCredentials([usernamePassword(credentialsId: 'user_cicd', usernameVariable: 'CICD_USER', passwordVariable: 'CICD_PASS')])
              {
                //milestone(7)
                  echo 'Desplegamos en PRE'
                  dir('./build_pipeline') {
                      sh './06_smoke_test_environmet.sh -f jenkins -e pre'
                  }
               }
            }
       }

    }
}