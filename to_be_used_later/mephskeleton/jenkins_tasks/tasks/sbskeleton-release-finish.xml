<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.TextParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>TIPO</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>release</string>
              <string>hotfix</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.mavenrepocleaner.MavenRepoCleanerProperty plugin="maven-repo-cleaner@1.2">
      <notOnThisProject>false</notOnThisProject>
    </org.jenkinsci.plugins.mavenrepocleaner.MavenRepoCleanerProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <secureGroovyScript plugin="script-security@1.40">
          <script>if (&quot;release&quot;.equals(TIPO)) {
    def map = [origen: &quot;develop&quot;]
    return map
}
if (&quot;hotfix&quot;.equals(TIPO)) {
    def map = [origen: &quot;master&quot;]
    return map
}</script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.7.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://<url_repo_git></url>
        <credentialsId>jenkins_admin</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.BitbucketWeb">
      <url>https://<url_web_repo_git></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.LocalBranch>
        <localBranch>master</localBranch>
      </hudson.plugins.git.extensions.impl.LocalBranch>
      <hudson.plugins.git.extensions.impl.WipeWorkspace/>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>echo &quot;A partir del chechout automatico de master hacemos merge de la branch indicada por parametro&quot;
git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff origin/${TIPO}/${VERSION}
echo &quot;Nos aseguramos de que en master tenemos la version correcta mediante mvn setversion, a veces con el fast forward, no toca los pom de master&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Maven>
      <targets>versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false</targets>
      <mavenName>M3</mavenName>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>echo &quot;Hacemos add de todos los ficheros pom modificados al stage precommit&quot;
git add --all
echo &quot;Si no hay nada que modificar, si hemos rescrito la misma version, no se ejecuta nada, sino se hace commit&quot;
git diff-index --quiet HEAD || git commit -m &quot;Release master merge ${VERSION} updating poms&quot;
echo &quot;Hacemos push a master remote&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> master
echo &quot;Taggeamos localmente la rama master&quot;
git tag -a ${VERSION} -m &quot;Release master tag updating poms&quot;
echo &quot;Hacemos push al tag&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> ${VERSION}
echo &quot;Hacemos checkout de develop&quot;
git checkout develop
echo &quot;Hacemos el merge de la release a develop&quot;
git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff origin/${TIPO}/${VERSION}
#git -c diff.mnemonicprefix=false -c core.quotepath=false merge --no-ff origin/master
echo &quot;Volvemos a hacer mvn setversion de DEVELOP-SNAPSHOT en develop&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Maven>
      <targets>versions:set -DnewVersion=DEVELOP-SNAPSHOT -DgenerateBackupPoms=false</targets>
      <mavenName>M3</mavenName>
      <usePrivateRepository>false</usePrivateRepository>
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <injectBuildVariables>false</injectBuildVariables>
    </hudson.tasks.Maven>
    <hudson.tasks.Shell>
      <command>echo &quot;Hacemos add de todos los ficheros pom modificados al stage precommit&quot;
git add --all
echo &quot;Si no hay nada que modificar, si hemos rescrito la misma version, no se ejecuta nada, sino se hace commit&quot;
git diff-index --quiet HEAD || git commit -m &quot;Release develop merge ${VERSION} updating poms&quot;
echo &quot;Hacemos push a develop remote&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> develop
echo &quot;Borramos la rama remota de la release&quot;
git push https://${CICD_USER}:${CICD_PASS}@<url_repo_git> --delete ${TIPO}/${VERSION}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.14">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>jenkins_admin</credentialsId>
          <usernameVariable>CICD_USER</usernameVariable>
          <passwordVariable>CICD_PASS</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>